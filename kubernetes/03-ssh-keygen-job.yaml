# Job per generare chiavi SSH e creare Secret
# FIX: Aumentata memoria per container create-secret (evita OOMKilled)

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ssh-key-generator
  namespace: student1

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ssh-key-generator
  namespace: student1
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ssh-key-generator
  namespace: student1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ssh-key-generator
subjects:
- kind: ServiceAccount
  name: ssh-key-generator
  namespace: student1

---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-ssh-keys
  namespace: student1
  labels:
    app: ssh-key-generator
    component: keygen
spec:
  ttlSecondsAfterFinished: 120
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: ssh-key-generator
    spec:
      serviceAccountName: ssh-key-generator
      restartPolicy: Never
      
      initContainers:
      # ============================================
      # STEP 1: Genera chiavi SSH
      # ============================================
      - name: keygen
        image: alpine:3.19
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "================================================"
          echo "  SSH KEY GENERATION - STEP 1"
          echo "================================================"
          
          echo "[1/6] Installing openssh..."
          apk add --no-cache openssh-client openssh-keygen
          
          echo "[2/6] Generating SSH key pair (RSA 4096)..."
          ssh-keygen -t rsa -b 4096 -f /keys/id_rsa -N "" -C "student1@lab"
          
          echo "[3/6] Creating known_hosts file..."
          touch /keys/known_hosts
          
          # Pre-populate known_hosts con server1 e server2
          echo "[4/6] Pre-populating known_hosts..."
          cat > /keys/known_hosts << 'EOF'
          server1 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC...
          server2 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC...
          EOF
          
          echo "[5/6] Setting permissions..."
          chmod 644 /keys/id_rsa /keys/id_rsa.pub /keys/known_hosts
          
          echo "[6/6] Creating completion marker..."
          date > /keys/.generated
          
          echo ""
          echo "✓ SSH keys generated successfully!"
          echo ""
          echo "Generated files:"
          ls -lh /keys/
          echo ""
          echo "Key fingerprint:"
          ssh-keygen -lf /keys/id_rsa.pub
          
        volumeMounts:
        - name: ssh-keys
          mountPath: /keys
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      
      containers:
      # ============================================
      # STEP 2: Crea Kubernetes Secret
      # ============================================
      - name: create-secret
        image: bitnamilegacy/kubectl:1.31
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          echo "================================================"
          echo "  KUBERNETES SECRET CREATION - STEP 2"
          echo "================================================"
          
          echo "[1/4] Waiting for keys to be generated..."
          timeout=60
          elapsed=0
          while [ ! -f /keys/.generated ]; do
            if [ $elapsed -ge $timeout ]; then
              echo "ERROR: Timeout waiting for key generation"
              exit 1
            fi
            sleep 1
            elapsed=$((elapsed + 1))
          done
          echo "✓ Keys found!"
          
          echo "[2/4] Reading namespace..."
          NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
          echo "✓ Namespace: ${NAMESPACE}"
          
          echo "[3/4] Creating Kubernetes secret 'ssh-keys'..."
          kubectl create secret generic ssh-keys \
            --from-file=id_rsa=/keys/id_rsa \
            --from-file=id_rsa.pub=/keys/id_rsa.pub \
            --from-file=known_hosts=/keys/known_hosts \
            --namespace=${NAMESPACE} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "[4/4] Verifying secret..."
          kubectl get secret ssh-keys -n ${NAMESPACE} -o jsonpath='{.metadata.name}: {.data}' | head -c 200
          echo "..."
          
          echo ""
          echo "✓ Secret 'ssh-keys' created successfully!"
          echo ""
          kubectl describe secret ssh-keys -n ${NAMESPACE}
          
        volumeMounts:
        - name: ssh-keys
          mountPath: /keys
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      
      volumes:
      - name: ssh-keys
        emptyDir:
          medium: Memory
          sizeLimit: 10Mi
