# Job per generare chiavi SSH e salvarle in Secret
# Eseguire una volta per ogni namespace student*
# Lo script deploy-lab.sh lo applica automaticamente

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ssh-key-generator
  namespace: student1

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-manager
  namespace: student1
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ssh-key-generator-binding
  namespace: student1
subjects:
- kind: ServiceAccount
  name: ssh-key-generator
  namespace: student1
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-ssh-keys
  namespace: student1
  labels:
    app: ssh-keygen
spec:
  ttlSecondsAfterFinished: 60
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: ssh-key-generator
      restartPolicy: Never
      
      containers:
      - name: keygen
        image: alpine:3.19
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Installing openssh..."
          apk add --no-cache openssh-client openssh-keygen
          
          echo "Generating SSH key pair..."
          ssh-keygen -t rsa -b 4096 -f /keys/id_rsa -N "" -C "student1@lab"
          
          echo "Creating known_hosts file..."
          touch /keys/known_hosts
          
          echo "Setting permissions..."
          chmod 600 /keys/id_rsa
          chmod 644 /keys/id_rsa.pub /keys/known_hosts
          
          echo "Creating completion marker..."
          date > /keys/.generated
          
          echo "✓ SSH keys generated successfully"
          ls -la /keys/
          
          echo "Waiting for secret creation..."
          sleep 5
        
        volumeMounts:
        - name: ssh-keys
          mountPath: /keys
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      
      initContainers:
      - name: create-secret
        image: bitnami/kubectl:1.28
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          echo "Waiting for keys to be generated..."
          while [ ! -f /keys/.generated ]; do
            sleep 1
          done
          
          echo "Keys found! Creating Kubernetes secret..."
          
          kubectl create secret generic ssh-keys \
            --from-file=id_rsa=/keys/id_rsa \
            --from-file=id_rsa.pub=/keys/id_rsa.pub \
            --from-file=known_hosts=/keys/known_hosts \
            --namespace=student1 \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✓ Secret 'ssh-keys' created successfully"
          
          kubectl get secret ssh-keys -n student1
        
        volumeMounts:
        - name: ssh-keys
          mountPath: /keys
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      - name: ssh-keys
        emptyDir:
          medium: Memory
          sizeLimit: 10Mi